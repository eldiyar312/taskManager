/**
 * This file was automatically generated by fastify-extract-definitions.
 * DO NOT MODIFY IT BY HAND. Instead, modify the fastify routes schemas
 * and re-run project to regenerate this file.
 */
import {
  ContextConfigDefault,
  FastifyInstance,
  FastifyLoggerInstance,
  FastifyRequest,
  FastifySchema,
  FastifyTypeProvider,
  FastifyTypeProviderDefault,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerBase,
  RawServerDefault,
} from 'fastify';
import { FastifyReply } from 'fastify/types/reply';
import { RouteGenericInterface } from 'fastify/types/route';
import {
  FastifyRequestType,
  ResolveFastifyRequestType,
} from 'fastify/types/type-provider';

export type RouteHandlerMethod<
  RawServer extends RawServerBase = RawServerDefault,
  RawRequest extends RawRequestDefaultExpression<RawServer> = RawRequestDefaultExpression<RawServer>,
  RawReply extends RawReplyDefaultExpression<RawServer> = RawReplyDefaultExpression<RawServer>,
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault,
  SchemaCompiler extends FastifySchema = FastifySchema,
  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault,
  RequestType extends FastifyRequestType = ResolveFastifyRequestType<
    TypeProvider,
    SchemaCompiler,
    RouteGeneric
  >,
  Logger extends FastifyLoggerInstance = FastifyLoggerInstance
> = (
  this: FastifyInstance<RawServer, RawRequest, RawReply, Logger, TypeProvider>,
  request: FastifyRequest<
    RouteGeneric,
    RawServer,
    RawRequest,
    SchemaCompiler,
    TypeProvider,
    ContextConfig,
    Logger,
    RequestType
  >,
  reply: FastifyReply<
    RawServer,
    RawRequest,
    RawReply,
    RouteGeneric,
    ContextConfig,
    SchemaCompiler,
    TypeProvider,
    RouteGeneric['Reply']
  >
) => Promise<RouteGeneric['Reply']> | RouteGeneric['Reply'] | void;

export type Handler<
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault
> = RouteHandlerMethod<
  RawServerDefault,
  RawRequestDefaultExpression,
  RawReplyDefaultExpression,
  RouteGeneric,
  ContextConfig
>;

export type RootOptions = object;

export type RootGetReply = RootGetReplyStatus200;

export type EnumsEnvironment = 'local' | 'staging' | 'production';

export type EnumsMode = 'production' | 'development' | 'test' | 'undefined';

export type ConfirmEmailPostReply = ModelsProfile | SimpleError;

export type EnumsRole = 'customer' | 'contractor';

export type EnumsLocale = 'ru';

export type MediaPostReply = ModelsMedia | SimpleError;

export type EnumsMediaType =
  | 'jpeg'
  | 'jpg'
  | 'png'
  | 'webp'
  | 'mp4'
  | 'mp3'
  | 'json'
  | 'pdf'
  | 'docx';

export type PasswordChangePostReply = ModelsStatus | SimpleError;

export type PasswordForgotPostReply = ModelsStatus | SimpleError;

export type PasswordForgotChangePostReply = ModelsProfile | SimpleError;

export type ProfileGetReply = ModelsProfile | SimpleError;

export type ProfilePutReply = ModelsProfile | SimpleError;

export type EnumsPaymentMethod = 'invoice';

export type ProfileBalanceReplenishPostReply = ModelsProfile | SimpleError;

export type ProfileEmailPutReply = ModelsProfile | SimpleError;

export type SignInEmailPostReply = ModelsProfile | SimpleError;

export type SignOutPostReply = ModelsStatus | SimpleError;

export type SignUpEmailPostReply = ModelsProfile | SimpleError;

export type SwaggerGet = object;

export type SwaggerAllGet = object;

export type SwaggerInitOAuthGet = object;

export type SwaggerJsonGet = object;

export type SwaggerStaticAllGet = object;

export type SwaggerUiConfigGet = object;

export type SwaggerYamlGet = object;

export type EnumsSortField = 'updatedAt' | 'title' | 'price';

export type EnumsSortDirection = '1' | '-1';

export type EnumsTaskStatus = 'backlog' | 'todo' | 'doing' | 'review' | 'done';

export type TaskGetReply = TaskGetReplyStatus200 | SimpleError;
/**
 * Task model
 */

export type ModelsTask = {
  _id: string;
  title: string;
  description: string;
  taskStatus: EnumsTaskStatus;
  files: string[];
  mediaSlots: {
    _id: string;
    description?: string;
    type: EnumsMediaSlotType;
  }[];
  price?: number;
  location?: string;
  startAt?: string;
  endAt?: string;
} & {
  subTasks: ModelsSubTask[];
  ownerId: string;
  contractorId?: string;
};

export type EnumsMediaSlotType = 'photo' | 'video';
/**
 * SubTask model
 */

export type ModelsSubTask = {
  _id: string;
  title: string;
  description: string;
  taskStatus: EnumsTaskStatus;
  files: string[];
  mediaSlots: {
    _id: string;
    description?: string;
    type: EnumsMediaSlotType;
  }[];
  price?: number;
  location?: string;
  startAt?: string;
  endAt?: string;
};

export type TaskPostReply = ModelsTask | SimpleError;
/**
 * WS service
 */

export type WsGet = object;

export type WsEchoPostReply = WsEchoPostReplyStatus200 | SimpleError;

export type EnumsFinanceStatus = 'SUCCESS' | 'FAIL' | 'PENDING';

export type EnumsFinanceType =
  | 'REPLENISH'
  | 'WITHDRAWAL'
  | 'TRANSFER'
  | 'REFUND';

export interface API {
  '*': {
    OPTIONS: RootOptions;
  };
  '/': {
    GET: RootGet;
  };
  '/confirm/email': {
    POST: ConfirmEmailPost;
  };
  '/media': {
    POST: MediaPost;
  };
  '/password/change': {
    POST: PasswordChangePost;
  };
  '/password/forgot': {
    POST: PasswordForgotPost;
  };
  '/password/forgot/change': {
    POST: PasswordForgotChangePost;
  };
  '/profile': {
    GET: ProfileGet;
    PUT: ProfilePut;
  };
  '/profile/balance/replenish': {
    POST: ProfileBalanceReplenishPost;
  };
  '/profile/email': {
    PUT: ProfileEmailPut;
  };
  '/sign-in/email': {
    POST: SignInEmailPost;
  };
  '/sign-out': {
    POST: SignOutPost;
  };
  '/sign-up/email': {
    POST: SignUpEmailPost;
  };
  '/swagger': {
    GET: SwaggerGet;
  };
  '/swagger/': {};
  '/swagger/*': {
    GET: SwaggerAllGet;
  };
  '/swagger/initOAuth': {
    GET: SwaggerInitOAuthGet;
  };
  '/swagger/json': {
    GET: SwaggerJsonGet;
  };
  '/swagger/static/*': {
    GET: SwaggerStaticAllGet;
  };
  '/swagger/uiConfig': {
    GET: SwaggerUiConfigGet;
  };
  '/swagger/yaml': {
    GET: SwaggerYamlGet;
  };
  '/task': {
    GET: TaskGet;
    POST: TaskPost;
  };
  '/ws': {
    GET: WsGet;
  };
  '/ws/echo': {
    POST: WsEchoPost;
  };
}

/**
 * Get API status
 */
export interface RootGet {
  Reply: RootGetReply;
}

export interface RootGetReplyStatus200 {
  environment: EnumsEnvironment;
  isAuthenticated: boolean;
  mode: EnumsMode;
  version: string;
}

/**
 * Confirm email
 */
export interface ConfirmEmailPost {
  Body: ConfirmEmailPostBody;
  Reply: ConfirmEmailPostReply;
}

export interface ConfirmEmailPostBody {
  code: string;
}

/**
 * Profile model
 */
export interface ModelsProfile {
  _id: string;
  role: EnumsRole;
  contacts: {
    email: {
      isVerified: boolean;
      value: string;
    };
  };
  personal: {
    name: string;
  };
  private: {};
  regional: {
    locale: EnumsLocale;
  };
  settings: {};
  balance: number;
}

/**
 * Error response
 */
export interface SimpleError {
  error: string;
  message?: string;
}

/**
 * Create media
 */
export interface MediaPost {
  Body: MediaPostBody;
  Reply: MediaPostReply;
}

export interface MediaPostBody {
  file: string;
  fileName: string;
}

/**
 * Media model
 */
export interface ModelsMedia {
  _id: string;
  type: EnumsMediaType;
  size: number;
  name: string;
  userId: string;
}

/**
 * Password change
 */
export interface PasswordChangePost {
  Body: PasswordChangePostBody;
  Reply: PasswordChangePostReply;
}

export interface PasswordChangePostBody {
  password: string;
  newPassword: string;
}

/**
 * Status model
 */
export interface ModelsStatus {
  status: boolean;
}

/**
 * Forgot password
 */
export interface PasswordForgotPost {
  Body: PasswordForgotPostBody;
  Reply: PasswordForgotPostReply;
}

export interface PasswordForgotPostBody {
  email: string;
}

/**
 * Forgotten password change
 */
export interface PasswordForgotChangePost {
  Body: PasswordForgotChangePostBody;
  Reply: PasswordForgotChangePostReply;
}

export interface PasswordForgotChangePostBody {
  code: string;
  newPassword: string;
}

/**
 * Get user profile
 */
export interface ProfileGet {
  Reply: ProfileGetReply;
}

/**
 * Update general profile info
 */
export interface ProfilePut {
  Body: ProfilePutBody;
  Reply: ProfilePutReply;
}

export interface ProfilePutBody {
  locale?: EnumsLocale;
  personalName?: string;
}

/**
 * Replenish user profile balance
 */
export interface ProfileBalanceReplenishPost {
  Body: ProfileBalanceReplenishPostBody;
  Reply: ProfileBalanceReplenishPostReply;
}

export interface ProfileBalanceReplenishPostBody {
  amount: number;
  paymentMethod: EnumsPaymentMethod;
}

/**
 * Update profile email
 */
export interface ProfileEmailPut {
  Body: ProfileEmailPutBody;
  Reply: ProfileEmailPutReply;
}

export interface ProfileEmailPutBody {
  email: string;
}

/**
 * Sign In with email and password
 */
export interface SignInEmailPost {
  Body: SignInEmailPostBody;
  Reply: SignInEmailPostReply;
}

export interface SignInEmailPostBody {
  email: string;
  password: string;
}

/**
 * End user session
 */
export interface SignOutPost {
  Reply: SignOutPostReply;
}

/**
 * Sign Up with email and password
 */
export interface SignUpEmailPost {
  Body: SignUpEmailPostBody;
  Reply: SignUpEmailPostReply;
}

export interface SignUpEmailPostBody {
  email: string;
  isAgreeTerms: boolean;
  locale: EnumsLocale;
  password: string;
  role: EnumsRole;
}

/**
 * Get list tasks
 */
export interface TaskGet {
  Querystring: TaskGetQuerystring;
  Reply: TaskGetReply;
}

export interface TaskGetQuerystring {
  cursor?: string;
  limit?: string;
  sortField?: EnumsSortField;
  sortDir?: EnumsSortDirection;
  status?: EnumsTaskStatus | EnumsTaskStatus[];
}

export interface TaskGetReplyStatus200 {
  tasks: ModelsTask[];
}

/**
 * Create task
 */
export interface TaskPost {
  Body: TaskPostBody;
  Reply: TaskPostReply;
}

export interface TaskPostBody {
  title: string;
  description: string;
  taskStatus?: EnumsTaskStatus;
  subTasks: {
    title: string;
    description: string;
    price?: string;
    startAt?: string;
    endAt?: string;
    taskStatus?: EnumsTaskStatus;
    files: string[];
    mediaSlots: {
      description?: string;
      type: EnumsMediaSlotType;
    }[];
  }[];
  files: string[];
  mediaSlots: {
    description?: string;
    type: EnumsMediaSlotType;
  }[];
  price?: number;
  location?: string;
  startAt?: string;
  endAt?: string;
  contractorId?: string;
}

/**
 * Send echo message via websocket
 */
export interface WsEchoPost {
  Body: WsEchoPostBody;
  Reply: WsEchoPostReply;
}

export interface WsEchoPostBody {
  type: string;
  payload: string;
}

export interface WsEchoPostReplyStatus200 {
  status: boolean;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "enums".
 */
export interface Enums {
  environment: EnumsEnvironment;
  locale: EnumsLocale;
  mode: EnumsMode;
  role: EnumsRole;
  taskStatus: EnumsTaskStatus;
  financeStatus: EnumsFinanceStatus;
  financeType: EnumsFinanceType;
  paymentMethod?: EnumsPaymentMethod;
  mediaType?: EnumsMediaType;
  mediaSlotType?: EnumsMediaSlotType;
  sortField?: EnumsSortField;
  sortDirection?: EnumsSortDirection;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "errors".
 */
export interface Errors {
  simple: SimpleError;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "models".
 */
export interface Models {
  profile: ModelsProfile;
  status: ModelsStatus;
  user: ModelsUser;
  finance: ModelsFinance;
  subTask: ModelsSubTask;
  task: ModelsTask;
  media: ModelsMedia;
}

/**
 * User model
 */
export interface ModelsUser {
  _id: string;
  contacts: {
    email: {
      isVerified: boolean;
      value: string;
    };
  };
  personal: {
    name: string;
  };
  balance: number;
}

/**
 * Finance model
 */
export interface ModelsFinance {
  _id: string;
  amount: number;
  type: EnumsFinanceType;
  status: EnumsFinanceStatus;
  paymentMethod?: string;
  userId: string;
  taskId?: string;
}
